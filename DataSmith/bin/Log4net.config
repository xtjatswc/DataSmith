<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
  </configSections>

  <log4net>
    <!-- 将日志记录到文本文件中 -->
    <appender name="RollingLogFileAppender_INFO" type="log4net.Appender.RollingFileAppender">
      <!--文件路径，如果RollingStyle为Composite或Date，则这里设置为目录，文件名在DatePattern里设置，其他则这里要有文件名-->
      <file type="log4net.Util.PatternString" value="log\" />
      <appendToFile value="true"/>
      <!--备份日志数目，默认为0。在CountDirection为负数时有效。-->
      <maxSizeRollBackups value="10"/>
      <!--当RollingStyle为Composite或Size，这里设置最大文件大小（可以KB，MB，GB为单位，默认为字节）-->
      <maximumFileSize value="1024KB"/>
      <!--创建新文件的方式，可选为Size（按文件大小），Date（按日期），Once（每启动一次创建一个文件），Composite（按日期及文件大小），默认为Composite-->
      <rollingStyle value="Composite"/>
      <!--当RollingStyle为Composite或Date，这里设置文件名格式-->
      <param name="datePattern" value="yyyy-MM\\yyyy-MM-dd\\yyyy-MM-dd.'Info.txt'" />
      <!--StaticLogFileName的值如果为true，RollingStyle的date值将无效，则当前日志文件(相对于历史日志文件而言)的文件名只取File参数。如果为false，则文件名取File+DatePattern-->
      <staticLogFileName value="false"/>
      <!--默认值为-1。当文件超过MaximumFileSize的大小时，如果要创建新的文件来存储日志，会根据CountDirection的值来重命名文件。大于-1的值时，file里指定的文件名会依次加上.0,.1,.2递增。当等于或小于-1时，创建依赖于MaxSizeRollBackups参数值，创建备份日志数。-->
      <countDirection value="-1"/>
      <!--防止生成多个文件、文件名累加-->
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <layout type="log4net.Layout.PatternLayout">
        <!--输出内容 分别为：%date日期，%thread线程ID，(%-5level)等级，(%logger)初始配置时自定义的名字，%message消息，%newline换行-->
        <!--<conversionPattern value="%date [%thread] %-5level %logger - %message%newline"/>-->
        <!--
          %m(message):输出的日志消息，如ILog.Debug(…)输出的一条消息
          %n(new line)：換行
          %d(datetime):输出当前语句运行的时刻 
          %r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数 
          %t(thread id):当前语句所在的线程ID
          %p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等
          %c(class):当前日志对象的名称
          %L：输出语句所在的行号
          %F：输出语句所在的文件名
          %-数字：表示该项的最小长度，如果不够，则用空格填充
        -->
        <conversionPattern value="%d [%t] %-5p %l : %m%n"/>
      </layout>
      <filter type="log4net.Filter.LevelRangeFilter">
        <param name="LevelMin" value="INFO" />
        <param name="LevelMax" value="INFO" />
      </filter>
    </appender>

    <appender name="RollingLogFileAppender_ERROR" type="log4net.Appender.RollingFileAppender">
      <file type="log4net.Util.PatternString" value="log\" />
      <appendToFile value="true"/>
      <maxSizeRollBackups value="10"/>
      <maximumFileSize value="1024KB"/>
      <rollingStyle value="Composite"/>
      <param name="datePattern" value="yyyy-MM\\yyyy-MM-dd\\yyyy-MM-dd.'Error.txt'" />
      <staticLogFileName value="false"/>
      <countDirection value="-1"/>
      <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%d [%t] %-5p %l : %m%n"/>
      </layout>
      <filter type="log4net.Filter.LevelRangeFilter">
        <param name="LevelMin" value="ERROR" />
        <param name="LevelMax" value="ERROR" />
      </filter>
    </appender>
    
    <!-- 将日志利用ADO.NET记录到数据库中 -->
    <appender name="AdoNetAppender_SQLServer" type="log4net.Appender.AdoNetAppender">
      <!-- 缓冲区大小 -->
      <bufferSize value="1" />
      <!-- 引用信息 -->
      <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>
      <!-- 连接到SQL Server的数据库连接字符串 -->
      <connectionString value="Data Source=(local); Initial Catalog=Management; User ID=sa; Password=123456;" />
      <!-- 插入Log表的SQL语句 -->
      <commandText value="INSERT INTO dbo.Log ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />

      <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout" />

      </parameter>

      <parameter>
        <parameterName value="@thread" />
        <dbType value="String" />
        <size value="255" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%thread" />

        </layout>

      </parameter>

      <parameter>
        <parameterName value="@log_level" />
        <dbType value="String" />
        <size value="50" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%level" />

        </layout>

      </parameter>

      <parameter>
        <parameterName value="@logger" />
        <dbType value="String" />
        <size value="255" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%logger" />

        </layout>

      </parameter>

      <parameter>
        <parameterName value="@message" />
        <dbType value="String" />
        <size value="4000" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%message" />

        </layout>

      </parameter>

      <parameter>
        <parameterName value="@exception" />
        <dbType value="String" />
        <size value="2000" />
        <layout type="log4net.Layout.ExceptionLayout" />

      </parameter>

    </appender>

    <root>
      <!-- 控制级别，由低到高：ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF -->
      <!-- 比如定义级别为INFO，则INFO级别向下的级别，比如DEBUG日志将不会被记录 -->
      <!-- 如果没有定义LEVEL的值，则缺省为DEBUG -->
      <level value="ALL" />
      <!-- 将日志利用ADO.NET记录到数据库中 -->
      <appender-ref ref="RollingLogFileAppender_INFO" />
      <appender-ref ref="RollingLogFileAppender_ERROR" />

    </root>

  </log4net>

</configuration>
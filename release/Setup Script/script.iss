; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "DataSmith"
#define MyAppVersion "1.0"
#define MyAppPublisher "康爱营养"
#define MyAppURL "http://www.chcare.cn/"
#define MyAppExeName "DataSmith.exe" 
; 是否将.net framework打包进去
#define IncludeFramework false
#define IsExternal ""
; 程序登录窗口名
#define MyAppLoggedName "DataSmith"
; 程序登录后的窗口名
#define MyAppLoggingName "DataSmith"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{EA629364-66D5-436A-A9CB-493F1C6B5893}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DisableProgramGroupPage=yes
LicenseFile=license file.txt
InfoBeforeFile=before installation.txt
InfoAfterFile=after installation.txt
OutputDir=..\
#if IncludeFramework  
  OutputBaseFilename=Setup_FW  
#else  
  OutputBaseFilename=Setup  
#endif
SetupIconFile=setup.ico
;Password=ainst
Compression=lzma
SolidCompression=yes

[Languages]
Name: "Chinese"; MessagesFile: "compiler:Languages\Chinese.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
;Source: "..\..\DataSmith\bin\DataSmith.exe"; DestDir: "{app}\bin"; Flags: ignoreversion
Source: "..\..\DataSmith\bin\*"; DestDir: "{app}\bin"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\..\DataSmith\msg\*"; DestDir: "{app}\msg"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ISTask.dll; DestDir: {app}; Flags: ignoreversion
#if IncludeFramework  
;Source: "dotNetFx40_Full_x86_x64.exe"; DestDir: "{app}\环境配置"; Flags: ignoreversion
#endif
; 注意: 不要在任何共享系统文件上使用“Flags: ignoreversion”  


[Icons]
;开始菜单快捷方式
Name: "{commonprograms}\接口工具\{#MyAppName}"; Filename: "{app}\bin\{#MyAppExeName}"
Name: "{commonprograms}\接口工具\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
;桌面快捷方式
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\bin\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\bin\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent


[code]
//全局变量
var
ErrorCode: Integer;
IsRunning: Boolean;
const WM_CLOSE=$0010;

// 安装前判断进程是否在运行；如果用的是Unicode版本的innosetup ,上面的代码不能起到检测进程、杀进程的功能，将string换成ansistring 这样就可以了
//RunTaskU('{#MyAppExeName}', false);
//KillTaskU('{#MyAppExeName}');
function RunTaskU(FileName: ansistring ; bFullpath: Boolean): Boolean;
external 'RunTask@files:ISTask.dll stdcall delayload';
function KillTaskU(ExeFileName: ansistring ): Integer;
external 'KillTask@files:ISTask.dll stdcall delayload';

// 在卸载时判断进程的dll已经没有了，所以不能调用它的函数。其实安装和卸载时调用的dll是不同的。
function RunTask(FileName: ansistring; bFullpath: Boolean): Boolean;
external 'RunTask@{app}\ISTask.dll stdcall uninstallonly';
function KillTask(ExeFileName: ansistring): Integer;
external 'KillTask@{app}\ISTask.dll stdcall uninstallonly';

// 检测.net framework 4.0安装环境，并安装.net框架
function CheckDotNetFrameWork() : Boolean;
var 
ResultCode: Integer;
Path, Path_x86,Path_x64, dotNetV4RegPath, dotNetV4PackFile, dotNetV4PackFile_sp1_x86, dotNetV4PackFile_sp1_x64, wic : string;
begin
    dotNetV4RegPath:='SOFTWARE\Microsoft\.NETFramework\policy\v4.0';
    dotNetV4PackFile:='{src}\环境配置\dotNetFx40_Full_x86_x64.exe';
    dotNetV4PackFile_sp1_x86:='{src}\环境配置\dotNetFx40_sp1\NDP40-KB2468871-v2-x86.exe';
    dotNetV4PackFile_sp1_x64:='{src}\环境配置\dotNetFx40_sp1\NDP40-KB2468871-v2-x64.exe';
    //wic:='{src}\环境配置\wic_x86_chs.exe';
    if RegKeyExists(HKLM, dotNetV4RegPath) then begin 
        Result := true; 
    end 
    else begin 
        // Exec(ExpandConstant(wic), '/q /norestart', '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);  // 安装wic,windows xp系统会需要安装wic
        if MsgBox('正在安装客户端必备组件.Net Framework 4.0，可能会花费几分钟，请稍后……', mbConfirmation, MB_YESNO) = idYes then begin
            Path := ExpandConstant(dotNetV4PackFile);
            Path_x86 := ExpandConstant(dotNetV4PackFile_sp1_x86);
            Path_x64 := ExpandConstant(dotNetV4PackFile_sp1_x64);
            if(FileOrDirExists(Path)) then begin
                Exec(Path, '/norestart', '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
                //安装.net framework 4.0 sp1补丁
                if(IsWin64) then begin
                    Exec(Path_x64, '/norestart', '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
                end
                else begin
                    Exec(Path_x86, '/norestart', '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
                end;
                Result := true;
            end
            else begin
                if MsgBox('软件安装目录中没有.Net Framework的安装程序，' #13#13 '单击【是】跳过.Net Framework 4.0安装，【否】将退出安装！', mbConfirmation, MB_YESNO) = idYes then begin
                    Result := true;
                end
                else begin
                // path := expandconstant('{pf}\internet explorer\iexplore.exe'); //从官网下载
                // exec(path, 'http://www.microsoft.com/en-us/download/confirmation.aspx?id=17851', '', sw_shownormal, ewwaituntilterminated, resultcode);
                // msgbox('请安装好.net framework4.0环境后，再运行本安装包程序！',mbinformation,mb_ok);
                Result := false;
                end;
            end;
        end
        else begin
            Result := false;
        end;
    end; 
end;

// 卸载之前的安装版本
function UnInstallBefore() : Integer;
var ResultCode : Integer;
UnInstallFile : String;
begin
    ResultCode:=-1;
    UnInstallFile:=''
    RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{EA629364-66D5-436A-A9CB-493F1C6B5893}_is1', 'UninstallString', UnInstallFile);
    StringChangeEx(UnInstallFile, '"', '', True);
    if(FileExists(UnInstallFile)) then begin
        Exec(UnInstallFile, '/norestart', ExtractFilePath(UnInstallFile), SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
    end;

    Result :=ResultCode;
end;

//判断程序是否存在  
//初始华程序事件   
function InitializeSetup() : Boolean;
var UnInstallFile : String;
begin
    Result :=true; //安装程序继续  
    IsRunning:=RunTaskU('{#MyAppExeName}', false);
    while IsRunning do 
    begin
        if Msgbox('系统检测到客户端正在运行，请确认是否关闭？' #13#13 '单击【是】自动关闭客户端并继续安装，【否】退出安装！', mbConfirmation, MB_YESNO) = idNO then begin
            Result :=false; //安装程序退出  
            IsRunning :=false; 
            exit; 
        end 
        else begin
            KillTaskU('{#MyAppExeName}'); // 关闭进程
            Result :=true; // 安装程序继续
            IsRunning:=RunTaskU('{#MyAppExeName}', false);
        end; 
    end;
    // 检查是否已经安装过应用程序 
    if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{EA629364-66D5-436A-A9CB-493F1C6B5893}_is1', 'UninstallString', UnInstallFile) then begin
        if Msgbox('客户端已安装过，是否卸载重装？' #13#13 '单击【是】卸载并重装，【否】退出安装！', mbConfirmation, MB_YESNO) = idYES then begin
            UnInstallBefore();
            Result :=true; //安装程序继续  
        end
        else begin
            Result :=false; //安装程序退出  
            IsRunning :=false;
        end
    end 
    else begin
        //#if IncludeFramework
        Result :=CheckDotNetFrameWork(); //安装程序继续 
        //#endif
        IsRunning:=RunTaskU('{#MyAppExeName}', false);
    end; 
end;

// 卸载时判断客户端是否正在运行  
function InitializeUninstall() : Boolean;
begin
    Result :=true; //安装程序继续
    IsRunning:=RunTask('{#MyAppExeName}', false);
    while IsRunning do
    begin
        if Msgbox('系统检测到客户端正在运行，请确认是否关闭？' #13#13 '单击【是】自动关闭客户端并继续卸载，【否】退出！', mbConfirmation, MB_YESNO) = idNO then begin
            Result :=false; //安装程序退出  
            IsRunning :=false;
        end 
        else begin
            KillTask('{#MyAppExeName}');
            Result :=true; //安装程序继续  
            IsRunning:=RunTask('{#MyAppExeName}', false);
        end;
    end;
end;
